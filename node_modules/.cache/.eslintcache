[{"/Users/emran/Desktop/Chat/src/index.js":"1","/Users/emran/Desktop/Chat/src/App.js":"2","/Users/emran/Desktop/Chat/src/reportWebVitals.js":"3","/Users/emran/Desktop/Chat/src/components/NavBar/NavBar.js":"4","/Users/emran/Desktop/Chat/src/components/Load/load.js":"5","/Users/emran/Desktop/Chat/src/components/AppRouter.js":"6","/Users/emran/Desktop/Chat/src/routes.js":"7","/Users/emran/Desktop/Chat/src/utils/consts.js":"8","/Users/emran/Desktop/Chat/src/components/Log/Log.js":"9","/Users/emran/Desktop/Chat/src/components/Chat/Chat.js":"10"},{"size":1111,"mtime":1624978329846,"results":"11","hashOfConfig":"12"},{"size":601,"mtime":1624980475442,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1624954010177,"results":"14","hashOfConfig":"12"},{"size":782,"mtime":1624979612990,"results":"15","hashOfConfig":"12"},{"size":251,"mtime":1624987597196,"results":"16","hashOfConfig":"12"},{"size":980,"mtime":1624979335077,"results":"17","hashOfConfig":"12"},{"size":353,"mtime":1624980829449,"results":"18","hashOfConfig":"12"},{"size":67,"mtime":1624955474481,"results":"19","hashOfConfig":"12"},{"size":661,"mtime":1624975299124,"results":"20","hashOfConfig":"12"},{"size":2336,"mtime":1624992442232,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xtm47t",{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"/Users/emran/Desktop/Chat/src/index.js",[],"/Users/emran/Desktop/Chat/src/App.js",["44","45"],"import {BrowserRouter} from 'react-router-dom'\nimport AppRouter from './components/AppRouter';\nimport Navbar from './components/NavBar/NavBar';\nimport './App.css';\nimport {useAuthState} from 'react-firebase-hooks/auth'\nimport { Context } from './index';\nimport Load from './components/Load/load';\nimport { useContext } from 'react';\n\n\nfunction App() {\n\n  const {auth} = useContext(Context)\n  const [user, loading, error] = useAuthState(auth)\n\n  if (loading) {\n    return <Load />\n  }\n  return (\n    <BrowserRouter>\n      <Navbar />\n      <AppRouter />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/Users/emran/Desktop/Chat/src/reportWebVitals.js",[],"/Users/emran/Desktop/Chat/src/components/NavBar/NavBar.js",[],"/Users/emran/Desktop/Chat/src/components/Load/load.js",[],"/Users/emran/Desktop/Chat/src/components/AppRouter.js",[],"/Users/emran/Desktop/Chat/src/routes.js",[],"/Users/emran/Desktop/Chat/src/utils/consts.js",[],"/Users/emran/Desktop/Chat/src/components/Log/Log.js",[],"/Users/emran/Desktop/Chat/src/components/Chat/Chat.js",["46"],"import React, { useContext, useState } from 'react';\nimport {useAuthState} from 'react-firebase-hooks/auth'\nimport { Context } from '../../index';\nimport classes from './Chat.module.css'\nimport {useCollectionData} from 'react-firebase-hooks/firestore'\nimport Load from '../Load/load';\nimport firebase from 'firebase';\n\nconst Chat = () => {\n\n    const {auth, firestore} = useContext(Context)\n    const [user] = useAuthState(auth)\n    const [value, setValue] = useState('')\n    const [messages, loading] = useCollectionData(\n        firestore.collection('messages').orderBy('createdAt')\n    )\n\n    const sendMessage = async () => {\n        firestore.collection('messages').add({\n            uid: user.uid,\n            displayName: user.displayName,\n            photoURL: user.photoURL,\n            text: value,\n            createdAt: firebase.firestore.FieldValue.serverTimestamp()\n        })\n        setValue('')\n    }\n\n    if (loading) {\n        return <Load />\n    }\n\n    return (\n        <div className = {classes.chat} style = {{height: window.innerHeight - 60}}>\n            <div className = {classes.window}>\n                {messages.map( messages => \n                    <div className = {classes.message} \n                    style = {{\n                        border: user.uid === messages.uid ? '3px solid #2EE59D' : '3px solid black',\n                        marginLeft: user.uid === messages.uid ? 'auto' : '10px',\n                    }}> \n                    <div className = {classes.info}>\n                        <img className = {classes.avatar} src = {messages.photoURL}/>\n                        <div className = {classes.name}>{messages.displayName}</div>\n                    </div>\n                        <div className = {classes.text} >{messages.text}</div>\n                    </div>\n                    ) }\n            </div>\n            <form className = {classes.form}>\n                <input \n                    className = {classes.input} \n                    maxlength = \"90\" \n                    value = {value} \n                    onChange = {e => setValue(e.target.value)}>\n\n                </input>\n                <button className = {classes.button} onClick={sendMessage} type = 'button'>отправить</button>\n                \n            </form>\n        </div>\n    )\n}\n\nexport default Chat;",{"ruleId":"47","severity":1,"message":"48","line":14,"column":10,"nodeType":"49","messageId":"50","endLine":14,"endColumn":14},{"ruleId":"47","severity":1,"message":"51","line":14,"column":25,"nodeType":"49","messageId":"50","endLine":14,"endColumn":30},{"ruleId":"52","severity":1,"message":"53","line":43,"column":25,"nodeType":"54","endLine":43,"endColumn":86},"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]